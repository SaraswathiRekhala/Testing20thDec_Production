/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing20thdec_production.wmstudio.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.testing20thdec_production.wmstudio.ServerDefinedTable;
import com.testing20thdec_production.wmstudio.service.ServerDefinedTableService;


/**
 * Controller object for domain model class ServerDefinedTable.
 * @see ServerDefinedTable
 */
@RestController("WMSTUDIO.ServerDefinedTableController")
@Api(value = "ServerDefinedTableController", description = "Exposes APIs to work with ServerDefinedTable resource.")
@RequestMapping("/WMSTUDIO/ServerDefinedTable")
public class ServerDefinedTableController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ServerDefinedTableController.class);

    @Autowired
	@Qualifier("WMSTUDIO.ServerDefinedTableService")
	private ServerDefinedTableService serverDefinedTableService;

	@ApiOperation(value = "Creates a new ServerDefinedTable instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ServerDefinedTable createServerDefinedTable(@RequestBody ServerDefinedTable serverDefinedTable) {
		LOGGER.debug("Create ServerDefinedTable with information: {}" , serverDefinedTable);

		serverDefinedTable = serverDefinedTableService.create(serverDefinedTable);
		LOGGER.debug("Created ServerDefinedTable with information: {}" , serverDefinedTable);

	    return serverDefinedTable;
	}

    @ApiOperation(value = "Returns the ServerDefinedTable instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ServerDefinedTable getServerDefinedTable(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting ServerDefinedTable with id: {}" , id);

        ServerDefinedTable foundServerDefinedTable = serverDefinedTableService.getById(id);
        LOGGER.debug("ServerDefinedTable details with id: {}" , foundServerDefinedTable);

        return foundServerDefinedTable;
    }

    @ApiOperation(value = "Updates the ServerDefinedTable instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ServerDefinedTable editServerDefinedTable(@PathVariable("id") Integer id, @RequestBody ServerDefinedTable serverDefinedTable) throws EntityNotFoundException {
        LOGGER.debug("Editing ServerDefinedTable with id: {}" , serverDefinedTable.getSeqId());

        serverDefinedTable.setSeqId(id);
        serverDefinedTable = serverDefinedTableService.update(serverDefinedTable);
        LOGGER.debug("ServerDefinedTable details with id: {}" , serverDefinedTable);

        return serverDefinedTable;
    }

    @ApiOperation(value = "Deletes the ServerDefinedTable instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteServerDefinedTable(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting ServerDefinedTable with id: {}" , id);

        ServerDefinedTable deletedServerDefinedTable = serverDefinedTableService.delete(id);

        return deletedServerDefinedTable != null;
    }

    /**
     * @deprecated Use {@link #findServerDefinedTables(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of ServerDefinedTable instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ServerDefinedTable> searchServerDefinedTablesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering ServerDefinedTables list");
        return serverDefinedTableService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of ServerDefinedTable instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ServerDefinedTable> findServerDefinedTables(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering ServerDefinedTables list");
        return serverDefinedTableService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of ServerDefinedTable instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ServerDefinedTable> filterServerDefinedTables(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering ServerDefinedTables list");
        return serverDefinedTableService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportServerDefinedTables(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return serverDefinedTableService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of ServerDefinedTable instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countServerDefinedTables( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting ServerDefinedTables");
		return serverDefinedTableService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getServerDefinedTableAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return serverDefinedTableService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ServerDefinedTableService instance
	 */
	protected void setServerDefinedTableService(ServerDefinedTableService service) {
		this.serverDefinedTableService = service;
	}

}

