/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing20thdec_production.wmstudio.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.math.BigDecimal;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.testing20thdec_production.wmstudio.Many2oneCompChild;
import com.testing20thdec_production.wmstudio.Many2oneCompChildId;
import com.testing20thdec_production.wmstudio.service.Many2oneCompChildService;


/**
 * Controller object for domain model class Many2oneCompChild.
 * @see Many2oneCompChild
 */
@RestController("WMSTUDIO.Many2oneCompChildController")
@Api(value = "Many2oneCompChildController", description = "Exposes APIs to work with Many2oneCompChild resource.")
@RequestMapping("/WMSTUDIO/Many2oneCompChild")
public class Many2oneCompChildController {

    private static final Logger LOGGER = LoggerFactory.getLogger(Many2oneCompChildController.class);

    @Autowired
	@Qualifier("WMSTUDIO.Many2oneCompChildService")
	private Many2oneCompChildService many2oneCompChildService;

	@ApiOperation(value = "Creates a new Many2oneCompChild instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Many2oneCompChild createMany2oneCompChild(@RequestBody Many2oneCompChild many2oneCompChild) {
		LOGGER.debug("Create Many2oneCompChild with information: {}" , many2oneCompChild);

		many2oneCompChild = many2oneCompChildService.create(many2oneCompChild);
		LOGGER.debug("Created Many2oneCompChild with information: {}" , many2oneCompChild);

	    return many2oneCompChild;
	}

@ApiOperation(value = "Returns the Many2oneCompChild instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Many2oneCompChild getMany2oneCompChild(@RequestParam("doubleId") BigDecimal doubleId,@RequestParam("byteId") Byte byteId,@RequestParam("charId") String charId) throws EntityNotFoundException {

        Many2oneCompChildId many2onecompchildId = new Many2oneCompChildId();
        many2onecompchildId.setDoubleId(doubleId);
        many2onecompchildId.setByteId(byteId);
        many2onecompchildId.setCharId(charId);

        LOGGER.debug("Getting Many2oneCompChild with id: {}" , many2onecompchildId);
        Many2oneCompChild many2oneCompChild = many2oneCompChildService.getById(many2onecompchildId);
        LOGGER.debug("Many2oneCompChild details with id: {}" , many2oneCompChild);

        return many2oneCompChild;
    }



    @ApiOperation(value = "Updates the Many2oneCompChild instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Many2oneCompChild editMany2oneCompChild(@RequestParam("doubleId") BigDecimal doubleId,@RequestParam("byteId") Byte byteId,@RequestParam("charId") String charId, @RequestBody Many2oneCompChild many2oneCompChild) throws EntityNotFoundException {

        many2oneCompChild.setDoubleId(doubleId);
        many2oneCompChild.setByteId(byteId);
        many2oneCompChild.setCharId(charId);

        LOGGER.debug("Many2oneCompChild details with id is updated with: {}" , many2oneCompChild);

        return many2oneCompChildService.update(many2oneCompChild);
    }


    @ApiOperation(value = "Deletes the Many2oneCompChild instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteMany2oneCompChild(@RequestParam("doubleId") BigDecimal doubleId,@RequestParam("byteId") Byte byteId,@RequestParam("charId") String charId) throws EntityNotFoundException {

        Many2oneCompChildId many2onecompchildId = new Many2oneCompChildId();
        many2onecompchildId.setDoubleId(doubleId);
        many2onecompchildId.setByteId(byteId);
        many2onecompchildId.setCharId(charId);

        LOGGER.debug("Deleting Many2oneCompChild with id: {}" , many2onecompchildId);
        Many2oneCompChild many2oneCompChild = many2oneCompChildService.delete(many2onecompchildId);

        return many2oneCompChild != null;
    }


    /**
     * @deprecated Use {@link #findMany2oneCompChilds(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Many2oneCompChild instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Many2oneCompChild> searchMany2oneCompChildsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Many2oneCompChilds list");
        return many2oneCompChildService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Many2oneCompChild instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Many2oneCompChild> findMany2oneCompChilds(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Many2oneCompChilds list");
        return many2oneCompChildService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Many2oneCompChild instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Many2oneCompChild> filterMany2oneCompChilds(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Many2oneCompChilds list");
        return many2oneCompChildService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportMany2oneCompChilds(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return many2oneCompChildService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Many2oneCompChild instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countMany2oneCompChilds( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Many2oneCompChilds");
		return many2oneCompChildService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getMany2oneCompChildAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return many2oneCompChildService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service Many2oneCompChildService instance
	 */
	protected void setMany2oneCompChildService(Many2oneCompChildService service) {
		this.many2oneCompChildService = service;
	}

}

