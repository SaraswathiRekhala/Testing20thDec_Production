/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing20thdec_production.wmstudio.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.hibernate.TypeMismatchException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.testing20thdec_production.wmstudio.AlltypesNewChanges;
import com.testing20thdec_production.wmstudio.service.AlltypesNewChangesService;


/**
 * Controller object for domain model class AlltypesNewChanges.
 * @see AlltypesNewChanges
 */
@RestController("WMSTUDIO.AlltypesNewChangesController")
@Api(value = "AlltypesNewChangesController", description = "Exposes APIs to work with AlltypesNewChanges resource.")
@RequestMapping("/WMSTUDIO/AlltypesNewChanges")
public class AlltypesNewChangesController {

    private static final Logger LOGGER = LoggerFactory.getLogger(AlltypesNewChangesController.class);

    @Autowired
	@Qualifier("WMSTUDIO.AlltypesNewChangesService")
	private AlltypesNewChangesService alltypesNewChangesService;

	@ApiOperation(value = "Creates a new AlltypesNewChanges instance.")
    @RequestMapping(method = RequestMethod.POST, consumes = "multipart/form-data")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AlltypesNewChanges createAlltypesNewChanges(@RequestPart("wm_data_json") AlltypesNewChanges alltypesNewChanges, @RequestPart(value = "blobCol", required = false) MultipartFile _blobCol) {
		LOGGER.debug("Create AlltypesNewChanges with information: {}" , alltypesNewChanges);

    alltypesNewChanges.setBlobCol(WMMultipartUtils.toByteArray(_blobCol));
		alltypesNewChanges = alltypesNewChangesService.create(alltypesNewChanges);
		LOGGER.debug("Created AlltypesNewChanges with information: {}" , alltypesNewChanges);

	    return alltypesNewChanges;
	}

    @ApiOperation(value = "Returns the AlltypesNewChanges instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AlltypesNewChanges getAlltypesNewChanges(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting AlltypesNewChanges with id: {}" , id);

        AlltypesNewChanges foundAlltypesNewChanges = alltypesNewChangesService.getById(id);
        LOGGER.debug("AlltypesNewChanges details with id: {}" , foundAlltypesNewChanges);

        return foundAlltypesNewChanges;
    }

    @ApiOperation(value = "Retrieves content for the given BLOB field in AlltypesNewChanges instance" )
    @RequestMapping(value = "/{id}/content/{fieldName}", method = RequestMethod.GET, produces="application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DownloadResponse getAlltypesNewChangesBLOBContent(@PathVariable("id") Integer id, @PathVariable("fieldName") String fieldName, HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, @RequestParam(value="download", defaultValue = "false") boolean download) {

        LOGGER.debug("Retrieves content for the given BLOB field {} in AlltypesNewChanges instance" , fieldName);

        if(!WMRuntimeUtils.isLob(AlltypesNewChanges.class, fieldName)) {
            throw new TypeMismatchException("Given field " + fieldName + " is not a valid BLOB type");
        }
        AlltypesNewChanges alltypesNewChanges = alltypesNewChangesService.getById(id);

        return WMMultipartUtils.buildDownloadResponseForBlob(alltypesNewChanges, fieldName, httpServletRequest, download);
    }

    @ApiOperation(value = "Updates the AlltypesNewChanges instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AlltypesNewChanges editAlltypesNewChanges(@PathVariable("id") Integer id, @RequestBody AlltypesNewChanges alltypesNewChanges) throws EntityNotFoundException {
        LOGGER.debug("Editing AlltypesNewChanges with id: {}" , alltypesNewChanges.getIntId());

        alltypesNewChanges.setIntId(id);
        alltypesNewChanges = alltypesNewChangesService.update(alltypesNewChanges);
        LOGGER.debug("AlltypesNewChanges details with id: {}" , alltypesNewChanges);

        return alltypesNewChanges;
    }

    @ApiOperation(value = "Updates the AlltypesNewChanges instance associated with the given id.This API should be used when AlltypesNewChanges instance fields that require multipart data.") 
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.POST, consumes = {"multipart/form-data"})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AlltypesNewChanges editAlltypesNewChanges(@PathVariable("id") Integer id, MultipartHttpServletRequest multipartHttpServletRequest) throws EntityNotFoundException {
        AlltypesNewChanges newAlltypesNewChanges = WMMultipartUtils.toObject(multipartHttpServletRequest, AlltypesNewChanges.class, "WMSTUDIO");
        newAlltypesNewChanges.setIntId(id);

        AlltypesNewChanges oldAlltypesNewChanges = alltypesNewChangesService.getById(id);
        WMMultipartUtils.updateLobsContent(oldAlltypesNewChanges, newAlltypesNewChanges);
        LOGGER.debug("Updating AlltypesNewChanges with information: {}" , newAlltypesNewChanges);

        return alltypesNewChangesService.update(newAlltypesNewChanges);
    }

    @ApiOperation(value = "Deletes the AlltypesNewChanges instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteAlltypesNewChanges(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting AlltypesNewChanges with id: {}" , id);

        AlltypesNewChanges deletedAlltypesNewChanges = alltypesNewChangesService.delete(id);

        return deletedAlltypesNewChanges != null;
    }

    /**
     * @deprecated Use {@link #findAlltypesNewChanges(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of AlltypesNewChanges instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AlltypesNewChanges> searchAlltypesNewChangesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering AlltypesNewChanges list");
        return alltypesNewChangesService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of AlltypesNewChanges instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AlltypesNewChanges> findAlltypesNewChanges(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering AlltypesNewChanges list");
        return alltypesNewChangesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of AlltypesNewChanges instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AlltypesNewChanges> filterAlltypesNewChanges(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering AlltypesNewChanges list");
        return alltypesNewChangesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportAlltypesNewChanges(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return alltypesNewChangesService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of AlltypesNewChanges instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countAlltypesNewChanges( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting AlltypesNewChanges");
		return alltypesNewChangesService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getAlltypesNewChangesAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return alltypesNewChangesService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service AlltypesNewChangesService instance
	 */
	protected void setAlltypesNewChangesService(AlltypesNewChangesService service) {
		this.alltypesNewChangesService = service;
	}

}

