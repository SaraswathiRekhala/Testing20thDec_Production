/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing20thdec_production.wmstudio.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.hibernate.TypeMismatchException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.testing20thdec_production.wmstudio.One2oneUcChild;
import com.testing20thdec_production.wmstudio.service.One2oneUcChildService;


/**
 * Controller object for domain model class One2oneUcChild.
 * @see One2oneUcChild
 */
@RestController("WMSTUDIO.One2oneUcChildController")
@Api(value = "One2oneUcChildController", description = "Exposes APIs to work with One2oneUcChild resource.")
@RequestMapping("/WMSTUDIO/One2oneUcChild")
public class One2oneUcChildController {

    private static final Logger LOGGER = LoggerFactory.getLogger(One2oneUcChildController.class);

    @Autowired
	@Qualifier("WMSTUDIO.One2oneUcChildService")
	private One2oneUcChildService one2oneUcChildService;

	@ApiOperation(value = "Creates a new One2oneUcChild instance.")
    @RequestMapping(method = RequestMethod.POST, consumes = "multipart/form-data")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public One2oneUcChild createOne2oneUcChild(@RequestPart("wm_data_json") One2oneUcChild one2oneUcChild, @RequestPart(value = "blobCol", required = false) MultipartFile _blobCol) {
		LOGGER.debug("Create One2oneUcChild with information: {}" , one2oneUcChild);

    one2oneUcChild.setBlobCol(WMMultipartUtils.toByteArray(_blobCol));
		one2oneUcChild = one2oneUcChildService.create(one2oneUcChild);
		LOGGER.debug("Created One2oneUcChild with information: {}" , one2oneUcChild);

	    return one2oneUcChild;
	}

    @ApiOperation(value = "Returns the One2oneUcChild instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public One2oneUcChild getOne2oneUcChild(@PathVariable("id") String id) throws EntityNotFoundException {
        LOGGER.debug("Getting One2oneUcChild with id: {}" , id);

        One2oneUcChild foundOne2oneUcChild = one2oneUcChildService.getById(id);
        LOGGER.debug("One2oneUcChild details with id: {}" , foundOne2oneUcChild);

        return foundOne2oneUcChild;
    }

    @ApiOperation(value = "Retrieves content for the given BLOB field in One2oneUcChild instance" )
    @RequestMapping(value = "/{id}/content/{fieldName}", method = RequestMethod.GET, produces="application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DownloadResponse getOne2oneUcChildBLOBContent(@PathVariable("id") String id, @PathVariable("fieldName") String fieldName, HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, @RequestParam(value="download", defaultValue = "false") boolean download) {

        LOGGER.debug("Retrieves content for the given BLOB field {} in One2oneUcChild instance" , fieldName);

        if(!WMRuntimeUtils.isLob(One2oneUcChild.class, fieldName)) {
            throw new TypeMismatchException("Given field " + fieldName + " is not a valid BLOB type");
        }
        One2oneUcChild one2oneUcChild = one2oneUcChildService.getById(id);

        return WMMultipartUtils.buildDownloadResponseForBlob(one2oneUcChild, fieldName, httpServletRequest, download);
    }

    @ApiOperation(value = "Updates the One2oneUcChild instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public One2oneUcChild editOne2oneUcChild(@PathVariable("id") String id, @RequestBody One2oneUcChild one2oneUcChild) throws EntityNotFoundException {
        LOGGER.debug("Editing One2oneUcChild with id: {}" , one2oneUcChild.getEmailId());

        one2oneUcChild.setEmailId(id);
        one2oneUcChild = one2oneUcChildService.update(one2oneUcChild);
        LOGGER.debug("One2oneUcChild details with id: {}" , one2oneUcChild);

        return one2oneUcChild;
    }

    @ApiOperation(value = "Updates the One2oneUcChild instance associated with the given id.This API should be used when One2oneUcChild instance fields that require multipart data.") 
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.POST, consumes = {"multipart/form-data"})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public One2oneUcChild editOne2oneUcChild(@PathVariable("id") String id, MultipartHttpServletRequest multipartHttpServletRequest) throws EntityNotFoundException {
        One2oneUcChild newOne2oneUcChild = WMMultipartUtils.toObject(multipartHttpServletRequest, One2oneUcChild.class, "WMSTUDIO");
        newOne2oneUcChild.setEmailId(id);

        One2oneUcChild oldOne2oneUcChild = one2oneUcChildService.getById(id);
        WMMultipartUtils.updateLobsContent(oldOne2oneUcChild, newOne2oneUcChild);
        LOGGER.debug("Updating One2oneUcChild with information: {}" , newOne2oneUcChild);

        return one2oneUcChildService.update(newOne2oneUcChild);
    }

    @ApiOperation(value = "Deletes the One2oneUcChild instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteOne2oneUcChild(@PathVariable("id") String id) throws EntityNotFoundException {
        LOGGER.debug("Deleting One2oneUcChild with id: {}" , id);

        One2oneUcChild deletedOne2oneUcChild = one2oneUcChildService.delete(id);

        return deletedOne2oneUcChild != null;
    }

    @RequestMapping(value = "/byteCol/{byteCol}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching One2oneUcChild with given unique key values.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public One2oneUcChild getByByteCol(@PathVariable("byteCol") Byte byteCol) {
        LOGGER.debug("Getting One2oneUcChild with uniques key ByteCol");
        return one2oneUcChildService.getByByteCol(byteCol);
    }

    /**
     * @deprecated Use {@link #findOne2oneUcChilds(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of One2oneUcChild instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<One2oneUcChild> searchOne2oneUcChildsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering One2oneUcChilds list");
        return one2oneUcChildService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of One2oneUcChild instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<One2oneUcChild> findOne2oneUcChilds(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering One2oneUcChilds list");
        return one2oneUcChildService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of One2oneUcChild instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<One2oneUcChild> filterOne2oneUcChilds(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering One2oneUcChilds list");
        return one2oneUcChildService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportOne2oneUcChilds(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return one2oneUcChildService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of One2oneUcChild instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countOne2oneUcChilds( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting One2oneUcChilds");
		return one2oneUcChildService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getOne2oneUcChildAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return one2oneUcChildService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service One2oneUcChildService instance
	 */
	protected void setOne2oneUcChildService(One2oneUcChildService service) {
		this.one2oneUcChildService = service;
	}

}

