/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing20thdec_production.wmstudio.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.testing20thdec_production.wmstudio.Many2oneCompParent;
import com.testing20thdec_production.wmstudio.Many2oneRelationChild1;
import com.testing20thdec_production.wmstudio.Many2oneRelationChild1Id;
import com.testing20thdec_production.wmstudio.service.Many2oneRelationChild1Service;


/**
 * Controller object for domain model class Many2oneRelationChild1.
 * @see Many2oneRelationChild1
 */
@RestController("WMSTUDIO.Many2oneRelationChild1Controller")
@Api(value = "Many2oneRelationChild1Controller", description = "Exposes APIs to work with Many2oneRelationChild1 resource.")
@RequestMapping("/WMSTUDIO/Many2oneRelationChild1")
public class Many2oneRelationChild1Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(Many2oneRelationChild1Controller.class);

    @Autowired
	@Qualifier("WMSTUDIO.Many2oneRelationChild1Service")
	private Many2oneRelationChild1Service many2oneRelationChild1Service;

	@ApiOperation(value = "Creates a new Many2oneRelationChild1 instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Many2oneRelationChild1 createMany2oneRelationChild1(@RequestBody Many2oneRelationChild1 many2oneRelationChild1) {
		LOGGER.debug("Create Many2oneRelationChild1 with information: {}" , many2oneRelationChild1);

		many2oneRelationChild1 = many2oneRelationChild1Service.create(many2oneRelationChild1);
		LOGGER.debug("Created Many2oneRelationChild1 with information: {}" , many2oneRelationChild1);

	    return many2oneRelationChild1;
	}

@ApiOperation(value = "Returns the Many2oneRelationChild1 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Many2oneRelationChild1 getMany2oneRelationChild1(@RequestParam("byteId") Byte byteId,@RequestParam("stringId") String stringId) throws EntityNotFoundException {

        Many2oneRelationChild1Id many2onerelationchild1Id = new Many2oneRelationChild1Id();
        many2onerelationchild1Id.setByteId(byteId);
        many2onerelationchild1Id.setStringId(stringId);

        LOGGER.debug("Getting Many2oneRelationChild1 with id: {}" , many2onerelationchild1Id);
        Many2oneRelationChild1 many2oneRelationChild1 = many2oneRelationChild1Service.getById(many2onerelationchild1Id);
        LOGGER.debug("Many2oneRelationChild1 details with id: {}" , many2oneRelationChild1);

        return many2oneRelationChild1;
    }



    @ApiOperation(value = "Updates the Many2oneRelationChild1 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Many2oneRelationChild1 editMany2oneRelationChild1(@RequestParam("byteId") Byte byteId,@RequestParam("stringId") String stringId, @RequestBody Many2oneRelationChild1 many2oneRelationChild1) throws EntityNotFoundException {

        many2oneRelationChild1.setByteId(byteId);
        many2oneRelationChild1.setStringId(stringId);

        LOGGER.debug("Many2oneRelationChild1 details with id is updated with: {}" , many2oneRelationChild1);

        return many2oneRelationChild1Service.update(many2oneRelationChild1);
    }


    @ApiOperation(value = "Deletes the Many2oneRelationChild1 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteMany2oneRelationChild1(@RequestParam("byteId") Byte byteId,@RequestParam("stringId") String stringId) throws EntityNotFoundException {

        Many2oneRelationChild1Id many2onerelationchild1Id = new Many2oneRelationChild1Id();
        many2onerelationchild1Id.setByteId(byteId);
        many2onerelationchild1Id.setStringId(stringId);

        LOGGER.debug("Deleting Many2oneRelationChild1 with id: {}" , many2onerelationchild1Id);
        Many2oneRelationChild1 many2oneRelationChild1 = many2oneRelationChild1Service.delete(many2onerelationchild1Id);

        return many2oneRelationChild1 != null;
    }


    /**
     * @deprecated Use {@link #findMany2oneRelationChild1s(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Many2oneRelationChild1 instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Many2oneRelationChild1> searchMany2oneRelationChild1sByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Many2oneRelationChild1s list");
        return many2oneRelationChild1Service.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Many2oneRelationChild1 instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Many2oneRelationChild1> findMany2oneRelationChild1s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Many2oneRelationChild1s list");
        return many2oneRelationChild1Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Many2oneRelationChild1 instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Many2oneRelationChild1> filterMany2oneRelationChild1s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Many2oneRelationChild1s list");
        return many2oneRelationChild1Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportMany2oneRelationChild1s(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return many2oneRelationChild1Service.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Many2oneRelationChild1 instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countMany2oneRelationChild1s( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Many2oneRelationChild1s");
		return many2oneRelationChild1Service.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getMany2oneRelationChild1AggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return many2oneRelationChild1Service.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/composite-id/many2oneCompParents", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the many2oneCompParents instance associated with the given composite-id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Many2oneCompParent> findAssociatedMany2oneCompParents(@RequestParam("byteId") Byte byteId,@RequestParam("stringId") String stringId, Pageable pageable) {

        LOGGER.debug("Fetching all associated many2oneCompParents");
        return many2oneRelationChild1Service.findAssociatedMany2oneCompParents(byteId, stringId, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service Many2oneRelationChild1Service instance
	 */
	protected void setMany2oneRelationChild1Service(Many2oneRelationChild1Service service) {
		this.many2oneRelationChild1Service = service;
	}

}

