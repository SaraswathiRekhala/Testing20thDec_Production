/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing20thdec_production.wmstudio.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing20thdec_production.wmstudio.Many2oneCompParent;
import com.testing20thdec_production.wmstudio.Many2oneRelationChild1;
import com.testing20thdec_production.wmstudio.Many2oneRelationChild1Id;

/**
 * Service object for domain model class {@link Many2oneRelationChild1}.
 */
public interface Many2oneRelationChild1Service {

    /**
     * Creates a new Many2oneRelationChild1. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Many2oneRelationChild1 if any.
     *
     * @param many2oneRelationChild1 Details of the Many2oneRelationChild1 to be created; value cannot be null.
     * @return The newly created Many2oneRelationChild1.
     */
	Many2oneRelationChild1 create(@Valid Many2oneRelationChild1 many2oneRelationChild1);


	/**
	 * Returns Many2oneRelationChild1 by given id if exists.
	 *
	 * @param many2onerelationchild1Id The id of the Many2oneRelationChild1 to get; value cannot be null.
	 * @return Many2oneRelationChild1 associated with the given many2onerelationchild1Id.
     * @throws EntityNotFoundException If no Many2oneRelationChild1 is found.
	 */
	Many2oneRelationChild1 getById(Many2oneRelationChild1Id many2onerelationchild1Id) throws EntityNotFoundException;

    /**
	 * Find and return the Many2oneRelationChild1 by given id if exists, returns null otherwise.
	 *
	 * @param many2onerelationchild1Id The id of the Many2oneRelationChild1 to get; value cannot be null.
	 * @return Many2oneRelationChild1 associated with the given many2onerelationchild1Id.
	 */
	Many2oneRelationChild1 findById(Many2oneRelationChild1Id many2onerelationchild1Id);


	/**
	 * Updates the details of an existing Many2oneRelationChild1. It replaces all fields of the existing Many2oneRelationChild1 with the given many2oneRelationChild1.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on Many2oneRelationChild1 if any.
     *
	 * @param many2oneRelationChild1 The details of the Many2oneRelationChild1 to be updated; value cannot be null.
	 * @return The updated Many2oneRelationChild1.
	 * @throws EntityNotFoundException if no Many2oneRelationChild1 is found with given input.
	 */
	Many2oneRelationChild1 update(@Valid Many2oneRelationChild1 many2oneRelationChild1) throws EntityNotFoundException;

    /**
	 * Deletes an existing Many2oneRelationChild1 with the given id.
	 *
	 * @param many2onerelationchild1Id The id of the Many2oneRelationChild1 to be deleted; value cannot be null.
	 * @return The deleted Many2oneRelationChild1.
	 * @throws EntityNotFoundException if no Many2oneRelationChild1 found with the given id.
	 */
	Many2oneRelationChild1 delete(Many2oneRelationChild1Id many2onerelationchild1Id) throws EntityNotFoundException;

	/**
	 * Find all Many2oneRelationChild1s matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Many2oneRelationChild1s.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<Many2oneRelationChild1> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all Many2oneRelationChild1s matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Many2oneRelationChild1s.
     *
     * @see Pageable
     * @see Page
	 */
    Page<Many2oneRelationChild1> findAll(String query, Pageable pageable);

    /**
	 * Exports all Many2oneRelationChild1s matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the Many2oneRelationChild1s in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the Many2oneRelationChild1.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated many2oneCompParents for given Many2oneRelationChild1 id.
     *
     * @param byteId value of byteId; value cannot be null
     * @param stringId value of stringId; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Many2oneCompParent instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Many2oneCompParent> findAssociatedMany2oneCompParents(Byte byteId, String stringId, Pageable pageable);

}

