/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing20thdec_production.wmstudio.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing20thdec_production.wmstudio.One2oneChild;
import com.testing20thdec_production.wmstudio.One2oneParent;


/**
 * ServiceImpl object for domain model class One2oneParent.
 *
 * @see One2oneParent
 */
@Service("WMSTUDIO.One2oneParentService")
@Validated
public class One2oneParentServiceImpl implements One2oneParentService {

    private static final Logger LOGGER = LoggerFactory.getLogger(One2oneParentServiceImpl.class);

    @Lazy
    @Autowired
	@Qualifier("WMSTUDIO.One2oneChildService")
	private One2oneChildService one2oneChildService;

    @Autowired
    @Qualifier("WMSTUDIO.One2oneParentDao")
    private WMGenericDao<One2oneParent, Byte> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<One2oneParent, Byte> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
    @Override
	public One2oneParent create(One2oneParent one2oneParent) {
        LOGGER.debug("Creating a new One2oneParent with information: {}", one2oneParent);
        One2oneChild one2oneChild = one2oneParent.getOne2oneChild();

        One2oneParent one2oneParentCreated = this.wmGenericDao.create(one2oneParent);
        if(one2oneChild != null) {
            LOGGER.debug("Creating a new child One2oneChild with information: {}", one2oneChild);
            one2oneChild.setOne2oneParent(one2oneParentCreated);
            one2oneChildService.create(one2oneChild);
        }
        return one2oneParentCreated;
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public One2oneParent getById(Byte one2oneparentId) throws EntityNotFoundException {
        LOGGER.debug("Finding One2oneParent by id: {}", one2oneparentId);
        One2oneParent one2oneParent = this.wmGenericDao.findById(one2oneparentId);
        if (one2oneParent == null){
            LOGGER.debug("No One2oneParent found with id: {}", one2oneparentId);
            throw new EntityNotFoundException(String.valueOf(one2oneparentId));
        }
        return one2oneParent;
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public One2oneParent findById(Byte one2oneparentId) {
        LOGGER.debug("Finding One2oneParent by id: {}", one2oneparentId);
        return this.wmGenericDao.findById(one2oneparentId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "WMSTUDIOTransactionManager")
	@Override
	public One2oneParent update(One2oneParent one2oneParent) throws EntityNotFoundException {
        LOGGER.debug("Updating One2oneParent with information: {}", one2oneParent);
        this.wmGenericDao.update(one2oneParent);

        Byte one2oneparentId = one2oneParent.getByteId();

        return this.wmGenericDao.findById(one2oneparentId);
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
	@Override
	public One2oneParent delete(Byte one2oneparentId) throws EntityNotFoundException {
        LOGGER.debug("Deleting One2oneParent with id: {}", one2oneparentId);
        One2oneParent deleted = this.wmGenericDao.findById(one2oneparentId);
        if (deleted == null) {
            LOGGER.debug("No One2oneParent found with id: {}", one2oneparentId);
            throw new EntityNotFoundException(String.valueOf(one2oneparentId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public Page<One2oneParent> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all One2oneParents");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Page<One2oneParent> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all One2oneParents");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service WMSTUDIO for table One2oneParent to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service One2oneChildService instance
	 */
	protected void setOne2oneChildService(One2oneChildService service) {
        this.one2oneChildService = service;
    }

}

