/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing20thdec_production.wmstudio.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.math.BigDecimal;
import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing20thdec_production.wmstudio.Many2oneCompChild2;


/**
 * ServiceImpl object for domain model class Many2oneCompChild2.
 *
 * @see Many2oneCompChild2
 */
@Service("WMSTUDIO.Many2oneCompChild2Service")
@Validated
public class Many2oneCompChild2ServiceImpl implements Many2oneCompChild2Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(Many2oneCompChild2ServiceImpl.class);


    @Autowired
    @Qualifier("WMSTUDIO.Many2oneCompChild2Dao")
    private WMGenericDao<Many2oneCompChild2, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Many2oneCompChild2, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
    @Override
	public Many2oneCompChild2 create(Many2oneCompChild2 many2oneCompChild2) {
        LOGGER.debug("Creating a new Many2oneCompChild2 with information: {}", many2oneCompChild2);

        Many2oneCompChild2 many2oneCompChild2Created = this.wmGenericDao.create(many2oneCompChild2);
        return many2oneCompChild2Created;
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public Many2oneCompChild2 getById(Integer many2onecompchild2Id) throws EntityNotFoundException {
        LOGGER.debug("Finding Many2oneCompChild2 by id: {}", many2onecompchild2Id);
        Many2oneCompChild2 many2oneCompChild2 = this.wmGenericDao.findById(many2onecompchild2Id);
        if (many2oneCompChild2 == null){
            LOGGER.debug("No Many2oneCompChild2 found with id: {}", many2onecompchild2Id);
            throw new EntityNotFoundException(String.valueOf(many2onecompchild2Id));
        }
        return many2oneCompChild2;
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public Many2oneCompChild2 findById(Integer many2onecompchild2Id) {
        LOGGER.debug("Finding Many2oneCompChild2 by id: {}", many2onecompchild2Id);
        return this.wmGenericDao.findById(many2onecompchild2Id);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Many2oneCompChild2 getByChild2ByteIdAndChild2CharIdAndChild2DoubleId(Byte child2ByteId, String child2CharId, BigDecimal child2DoubleId) {
        Map<String, Object> child2ByteIdAndChild2CharIdAndChild2DoubleIdMap = new HashMap<>();
        child2ByteIdAndChild2CharIdAndChild2DoubleIdMap.put("child2ByteId", child2ByteId);
        child2ByteIdAndChild2CharIdAndChild2DoubleIdMap.put("child2CharId", child2CharId);
        child2ByteIdAndChild2CharIdAndChild2DoubleIdMap.put("child2DoubleId", child2DoubleId);

        LOGGER.debug("Finding Many2oneCompChild2 by unique keys: {}", child2ByteIdAndChild2CharIdAndChild2DoubleIdMap);
        Many2oneCompChild2 many2oneCompChild2 = this.wmGenericDao.findByUniqueKey(child2ByteIdAndChild2CharIdAndChild2DoubleIdMap);

        if (many2oneCompChild2 == null){
            LOGGER.debug("No Many2oneCompChild2 found with given unique key values: {}", child2ByteIdAndChild2CharIdAndChild2DoubleIdMap);
            throw new EntityNotFoundException(String.valueOf(child2ByteIdAndChild2CharIdAndChild2DoubleIdMap));
        }

        return many2oneCompChild2;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "WMSTUDIOTransactionManager")
	@Override
	public Many2oneCompChild2 update(Many2oneCompChild2 many2oneCompChild2) throws EntityNotFoundException {
        LOGGER.debug("Updating Many2oneCompChild2 with information: {}", many2oneCompChild2);
        this.wmGenericDao.update(many2oneCompChild2);

        Integer many2onecompchild2Id = many2oneCompChild2.getPkId();

        return this.wmGenericDao.findById(many2onecompchild2Id);
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
	@Override
	public Many2oneCompChild2 delete(Integer many2onecompchild2Id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Many2oneCompChild2 with id: {}", many2onecompchild2Id);
        Many2oneCompChild2 deleted = this.wmGenericDao.findById(many2onecompchild2Id);
        if (deleted == null) {
            LOGGER.debug("No Many2oneCompChild2 found with id: {}", many2onecompchild2Id);
            throw new EntityNotFoundException(String.valueOf(many2onecompchild2Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public Page<Many2oneCompChild2> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Many2oneCompChild2s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Page<Many2oneCompChild2> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Many2oneCompChild2s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service WMSTUDIO for table Many2oneCompChild2 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

