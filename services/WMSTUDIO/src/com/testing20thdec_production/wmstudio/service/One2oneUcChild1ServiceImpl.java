/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing20thdec_production.wmstudio.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing20thdec_production.wmstudio.One2oneUcChild1;


/**
 * ServiceImpl object for domain model class One2oneUcChild1.
 *
 * @see One2oneUcChild1
 */
@Service("WMSTUDIO.One2oneUcChild1Service")
@Validated
public class One2oneUcChild1ServiceImpl implements One2oneUcChild1Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(One2oneUcChild1ServiceImpl.class);


    @Autowired
    @Qualifier("WMSTUDIO.One2oneUcChild1Dao")
    private WMGenericDao<One2oneUcChild1, Short> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<One2oneUcChild1, Short> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
    @Override
	public One2oneUcChild1 create(One2oneUcChild1 one2oneUcChild1) {
        LOGGER.debug("Creating a new One2oneUcChild1 with information: {}", one2oneUcChild1);

        One2oneUcChild1 one2oneUcChild1Created = this.wmGenericDao.create(one2oneUcChild1);
        return one2oneUcChild1Created;
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public One2oneUcChild1 getById(Short one2oneucchild1Id) throws EntityNotFoundException {
        LOGGER.debug("Finding One2oneUcChild1 by id: {}", one2oneucchild1Id);
        One2oneUcChild1 one2oneUcChild1 = this.wmGenericDao.findById(one2oneucchild1Id);
        if (one2oneUcChild1 == null){
            LOGGER.debug("No One2oneUcChild1 found with id: {}", one2oneucchild1Id);
            throw new EntityNotFoundException(String.valueOf(one2oneucchild1Id));
        }
        return one2oneUcChild1;
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public One2oneUcChild1 findById(Short one2oneucchild1Id) {
        LOGGER.debug("Finding One2oneUcChild1 by id: {}", one2oneucchild1Id);
        return this.wmGenericDao.findById(one2oneucchild1Id);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public One2oneUcChild1 getByEmailCol(String emailCol) {
        Map<String, Object> emailColMap = new HashMap<>();
        emailColMap.put("emailCol", emailCol);

        LOGGER.debug("Finding One2oneUcChild1 by unique keys: {}", emailColMap);
        One2oneUcChild1 one2oneUcChild1 = this.wmGenericDao.findByUniqueKey(emailColMap);

        if (one2oneUcChild1 == null){
            LOGGER.debug("No One2oneUcChild1 found with given unique key values: {}", emailColMap);
            throw new EntityNotFoundException(String.valueOf(emailColMap));
        }

        return one2oneUcChild1;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "WMSTUDIOTransactionManager")
	@Override
	public One2oneUcChild1 update(One2oneUcChild1 one2oneUcChild1) throws EntityNotFoundException {
        LOGGER.debug("Updating One2oneUcChild1 with information: {}", one2oneUcChild1);
        this.wmGenericDao.update(one2oneUcChild1);

        Short one2oneucchild1Id = one2oneUcChild1.getShortId();

        return this.wmGenericDao.findById(one2oneucchild1Id);
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
	@Override
	public One2oneUcChild1 delete(Short one2oneucchild1Id) throws EntityNotFoundException {
        LOGGER.debug("Deleting One2oneUcChild1 with id: {}", one2oneucchild1Id);
        One2oneUcChild1 deleted = this.wmGenericDao.findById(one2oneucchild1Id);
        if (deleted == null) {
            LOGGER.debug("No One2oneUcChild1 found with id: {}", one2oneucchild1Id);
            throw new EntityNotFoundException(String.valueOf(one2oneucchild1Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public Page<One2oneUcChild1> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all One2oneUcChild1s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Page<One2oneUcChild1> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all One2oneUcChild1s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service WMSTUDIO for table One2oneUcChild1 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

