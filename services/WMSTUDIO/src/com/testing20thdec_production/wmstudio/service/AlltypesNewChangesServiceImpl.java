/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing20thdec_production.wmstudio.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing20thdec_production.wmstudio.AlltypesNewChanges;


/**
 * ServiceImpl object for domain model class AlltypesNewChanges.
 *
 * @see AlltypesNewChanges
 */
@Service("WMSTUDIO.AlltypesNewChangesService")
@Validated
public class AlltypesNewChangesServiceImpl implements AlltypesNewChangesService {

    private static final Logger LOGGER = LoggerFactory.getLogger(AlltypesNewChangesServiceImpl.class);


    @Autowired
    @Qualifier("WMSTUDIO.AlltypesNewChangesDao")
    private WMGenericDao<AlltypesNewChanges, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<AlltypesNewChanges, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
    @Override
	public AlltypesNewChanges create(AlltypesNewChanges alltypesNewChanges) {
        LOGGER.debug("Creating a new AlltypesNewChanges with information: {}", alltypesNewChanges);

        AlltypesNewChanges alltypesNewChangesCreated = this.wmGenericDao.create(alltypesNewChanges);
        return alltypesNewChangesCreated;
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public AlltypesNewChanges getById(Integer alltypesnewchangesId) throws EntityNotFoundException {
        LOGGER.debug("Finding AlltypesNewChanges by id: {}", alltypesnewchangesId);
        AlltypesNewChanges alltypesNewChanges = this.wmGenericDao.findById(alltypesnewchangesId);
        if (alltypesNewChanges == null){
            LOGGER.debug("No AlltypesNewChanges found with id: {}", alltypesnewchangesId);
            throw new EntityNotFoundException(String.valueOf(alltypesnewchangesId));
        }
        return alltypesNewChanges;
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public AlltypesNewChanges findById(Integer alltypesnewchangesId) {
        LOGGER.debug("Finding AlltypesNewChanges by id: {}", alltypesnewchangesId);
        return this.wmGenericDao.findById(alltypesnewchangesId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "WMSTUDIOTransactionManager")
	@Override
	public AlltypesNewChanges update(AlltypesNewChanges alltypesNewChanges) throws EntityNotFoundException {
        LOGGER.debug("Updating AlltypesNewChanges with information: {}", alltypesNewChanges);
        this.wmGenericDao.update(alltypesNewChanges);

        Integer alltypesnewchangesId = alltypesNewChanges.getIntId();

        return this.wmGenericDao.findById(alltypesnewchangesId);
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
	@Override
	public AlltypesNewChanges delete(Integer alltypesnewchangesId) throws EntityNotFoundException {
        LOGGER.debug("Deleting AlltypesNewChanges with id: {}", alltypesnewchangesId);
        AlltypesNewChanges deleted = this.wmGenericDao.findById(alltypesnewchangesId);
        if (deleted == null) {
            LOGGER.debug("No AlltypesNewChanges found with id: {}", alltypesnewchangesId);
            throw new EntityNotFoundException(String.valueOf(alltypesnewchangesId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public Page<AlltypesNewChanges> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all AlltypesNewChanges");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Page<AlltypesNewChanges> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all AlltypesNewChanges");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service WMSTUDIO for table AlltypesNewChanges to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

