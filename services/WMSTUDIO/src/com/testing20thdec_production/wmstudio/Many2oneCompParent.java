/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing20thdec_production.wmstudio;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.math.BigInteger;
import java.util.List;
import java.util.Objects;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.Id;
import javax.persistence.IdClass;
import javax.persistence.JoinColumn;
import javax.persistence.JoinColumns;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;

/**
 * Many2oneCompParent generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`MANY2ONE_COMP_PARENT`")
@IdClass(Many2oneCompParentId.class)
public class Many2oneCompParent implements Serializable {

    private Byte byteId;
    private String stringId;
    private String charId;
    private Double floatId;
    private String booleanCol;
    private BigInteger bigintCol;
    private Many2oneRelationChild1 many2oneRelationChild1;
    private List<Many2oneCompChild> many2oneCompChilds;

    @Id
    @Column(name = "`BYTE ID`", nullable = false, scale = 0, precision = 2)
    public Byte getByteId() {
        return this.byteId;
    }

    public void setByteId(Byte byteId) {
        this.byteId = byteId;
    }

    @Id
    @Column(name = "`STRING ID`", nullable = false, length = 20)
    public String getStringId() {
        return this.stringId;
    }

    public void setStringId(String stringId) {
        this.stringId = stringId;
    }

    @Id
    @Column(name = "`CHAR ID`", nullable = false, length = 1)
    public String getCharId() {
        return this.charId;
    }

    public void setCharId(String charId) {
        this.charId = charId;
    }

    @Id
    @Column(name = "`FLOAT ID`", nullable = false, scale = 4, precision = 8)
    public Double getFloatId() {
        return this.floatId;
    }

    public void setFloatId(Double floatId) {
        this.floatId = floatId;
    }

    @Column(name = "`BOOLEAN COL`", nullable = true, length = 1)
    public String getBooleanCol() {
        return this.booleanCol;
    }

    public void setBooleanCol(String booleanCol) {
        this.booleanCol = booleanCol;
    }

    @Column(name = "`BIGINT COL`", nullable = true, scale = 0, precision = 35)
    public BigInteger getBigintCol() {
        return this.bigintCol;
    }

    public void setBigintCol(BigInteger bigintCol) {
        this.bigintCol = bigintCol;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumns(value = {
            @JoinColumn(name = "`BYTE ID`", referencedColumnName = "`Byte ID`", insertable = false, updatable = false),
            @JoinColumn(name = "`STRING ID`", referencedColumnName = "`String Id`", insertable = false, updatable = false)},
        foreignKey = @ForeignKey(name = "`FK_Many2One_RelationChiluLNtB`"))
    public Many2oneRelationChild1 getMany2oneRelationChild1() {
        return this.many2oneRelationChild1;
    }

    public void setMany2oneRelationChild1(Many2oneRelationChild1 many2oneRelationChild1) {
        if(many2oneRelationChild1 != null) {
            this.byteId = many2oneRelationChild1.getByteId();
            this.stringId = many2oneRelationChild1.getStringId();
        }

        this.many2oneRelationChild1 = many2oneRelationChild1;
    }

    @JsonInclude(Include.NON_EMPTY)
    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.REMOVE, mappedBy = "many2oneCompParent")
    public List<Many2oneCompChild> getMany2oneCompChilds() {
        return this.many2oneCompChilds;
    }

    public void setMany2oneCompChilds(List<Many2oneCompChild> many2oneCompChilds) {
        this.many2oneCompChilds = many2oneCompChilds;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Many2oneCompParent)) return false;
        final Many2oneCompParent many2oneCompParent = (Many2oneCompParent) o;
        return Objects.equals(getByteId(), many2oneCompParent.getByteId()) &&
                Objects.equals(getStringId(), many2oneCompParent.getStringId()) &&
                Objects.equals(getCharId(), many2oneCompParent.getCharId()) &&
                Objects.equals(getFloatId(), many2oneCompParent.getFloatId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getByteId(),
                getStringId(),
                getCharId(),
                getFloatId());
    }
}

