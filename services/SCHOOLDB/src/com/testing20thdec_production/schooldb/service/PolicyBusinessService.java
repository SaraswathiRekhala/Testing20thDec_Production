/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing20thdec_production.schooldb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.data.periods.PeriodClause;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing20thdec_production.schooldb.PolicyBusiness;

/**
 * Service object for domain model class {@link PolicyBusiness}.
 */
public interface PolicyBusinessService {

    /**
     * Creates a new PolicyBusiness. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on PolicyBusiness if any.
     *
     * @param policyBusiness Details of the PolicyBusiness to be created; value cannot be null.
     * @return The newly created PolicyBusiness.
     */
	PolicyBusiness create(@Valid PolicyBusiness policyBusiness);


	/**
	 * Returns PolicyBusiness by given id if exists.
	 *
	 * @param policybusinessId The id of the PolicyBusiness to get; value cannot be null.
	 * @return PolicyBusiness associated with the given policybusinessId.
     * @throws EntityNotFoundException If no PolicyBusiness is found.
	 */
	PolicyBusiness getById(Integer policybusinessId) throws EntityNotFoundException;

    /**
	 * Find and return the PolicyBusiness by given id if exists, returns null otherwise.
	 *
	 * @param policybusinessId The id of the PolicyBusiness to get; value cannot be null.
	 * @return PolicyBusiness associated with the given policybusinessId.
	 */
	PolicyBusiness findById(Integer policybusinessId);


	/**
	 * Updates the details of an existing PolicyBusiness. It replaces all fields of the existing PolicyBusiness with the given policyBusiness.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on PolicyBusiness if any.
     *
	 * @param policyBusiness The details of the PolicyBusiness to be updated; value cannot be null.
	 * @return The updated PolicyBusiness.
	 * @throws EntityNotFoundException if no PolicyBusiness is found with given input.
	 */
	PolicyBusiness update(@Valid PolicyBusiness policyBusiness) throws EntityNotFoundException;

    /**
	 * Deletes an existing PolicyBusiness with the given id.
	 *
	 * @param policybusinessId The id of the PolicyBusiness to be deleted; value cannot be null.
	 * @return The deleted PolicyBusiness.
	 * @throws EntityNotFoundException if no PolicyBusiness found with the given id.
	 */
	PolicyBusiness delete(Integer policybusinessId) throws EntityNotFoundException;

	/**
	 * Find all PolicyBusinesses matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching PolicyBusinesses.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<PolicyBusiness> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all PolicyBusinesses matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching PolicyBusinesses.
     *
     * @see Pageable
     * @see Page
	 */
    Page<PolicyBusiness> findAll(String query, Pageable pageable);

    /**
	 * Find all PolicyBusinesses's history matching the given period clauses and query. This method returns
     * Paginated results.
     * Note: Go through the documentation for <u>periodClause</u> and <u>query</u> syntax.
	 *
     * @param applicationClause The period clause condition.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching PolicyBusinesses.
     *
     * @see Pageable
     * @see Page
	 */
    Page<PolicyBusiness> findHistory(String applicationClause, String query, Pageable pageable);

    /**
	 * Find all PolicyBusinesses's history matching the given period clauses and query. This method returns
     * Paginated results.
     * Note: Go through the documentation for <u>periodClause</u> and <u>query</u> syntax.
	 *
     * @param periodClauses The clauses to filter history.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching PolicyBusinesses.
     *
     * @see Pageable
     * @see Page
	 */
    Page<PolicyBusiness> findHistory(List<PeriodClause> periodClauses, String query, Pageable pageable);

    /**
	 * Exports all PolicyBusinesses matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the PolicyBusinesses in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the PolicyBusiness.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}

