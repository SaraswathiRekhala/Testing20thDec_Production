/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing20thdec_production.schooldb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing20thdec_production.schooldb.PolicyBitemporalHistory;
import com.testing20thdec_production.schooldb.PolicyBitemporalHistoryId;


/**
 * ServiceImpl object for domain model class PolicyBitemporalHistory.
 *
 * @see PolicyBitemporalHistory
 */
@Service("SCHOOLDB.PolicyBitemporalHistoryService")
@Validated
public class PolicyBitemporalHistoryServiceImpl implements PolicyBitemporalHistoryService {

    private static final Logger LOGGER = LoggerFactory.getLogger(PolicyBitemporalHistoryServiceImpl.class);


    @Autowired
    @Qualifier("SCHOOLDB.PolicyBitemporalHistoryDao")
    private WMGenericDao<PolicyBitemporalHistory, PolicyBitemporalHistoryId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<PolicyBitemporalHistory, PolicyBitemporalHistoryId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "SCHOOLDBTransactionManager")
    @Override
	public PolicyBitemporalHistory create(PolicyBitemporalHistory policyBitemporalHistory) {
        LOGGER.debug("Creating a new PolicyBitemporalHistory with information: {}", policyBitemporalHistory);

        PolicyBitemporalHistory policyBitemporalHistoryCreated = this.wmGenericDao.create(policyBitemporalHistory);
        return policyBitemporalHistoryCreated;
    }

	@Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
	@Override
	public PolicyBitemporalHistory getById(PolicyBitemporalHistoryId policybitemporalhistoryId) throws EntityNotFoundException {
        LOGGER.debug("Finding PolicyBitemporalHistory by id: {}", policybitemporalhistoryId);
        PolicyBitemporalHistory policyBitemporalHistory = this.wmGenericDao.findById(policybitemporalhistoryId);
        if (policyBitemporalHistory == null){
            LOGGER.debug("No PolicyBitemporalHistory found with id: {}", policybitemporalhistoryId);
            throw new EntityNotFoundException(String.valueOf(policybitemporalhistoryId));
        }
        return policyBitemporalHistory;
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
	@Override
	public PolicyBitemporalHistory findById(PolicyBitemporalHistoryId policybitemporalhistoryId) {
        LOGGER.debug("Finding PolicyBitemporalHistory by id: {}", policybitemporalhistoryId);
        return this.wmGenericDao.findById(policybitemporalhistoryId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "SCHOOLDBTransactionManager")
	@Override
	public PolicyBitemporalHistory update(PolicyBitemporalHistory policyBitemporalHistory) throws EntityNotFoundException {
        LOGGER.debug("Updating PolicyBitemporalHistory with information: {}", policyBitemporalHistory);
        this.wmGenericDao.update(policyBitemporalHistory);

        PolicyBitemporalHistoryId policybitemporalhistoryId = new PolicyBitemporalHistoryId();
        policybitemporalhistoryId.setId(policyBitemporalHistory.getId());
        policybitemporalhistoryId.setVin(policyBitemporalHistory.getVin());
        policybitemporalhistoryId.setAnnualMileage(policyBitemporalHistory.getAnnualMileage());
        policybitemporalhistoryId.setRentalCar(policyBitemporalHistory.getRentalCar());
        policybitemporalhistoryId.setCoverageAmt(policyBitemporalHistory.getCoverageAmt());
        policybitemporalhistoryId.setBusStart(policyBitemporalHistory.getBusStart());
        policybitemporalhistoryId.setBusEnd(policyBitemporalHistory.getBusEnd());
        policybitemporalhistoryId.setSysStart(policyBitemporalHistory.getSysStart());
        policybitemporalhistoryId.setSysEnd(policyBitemporalHistory.getSysEnd());
        policybitemporalhistoryId.setTransStart(policyBitemporalHistory.getTransStart());
        policybitemporalhistoryId.setSqlOperation(policyBitemporalHistory.getSqlOperation());

        return this.wmGenericDao.findById(policybitemporalhistoryId);
    }

    @Transactional(value = "SCHOOLDBTransactionManager")
	@Override
	public PolicyBitemporalHistory delete(PolicyBitemporalHistoryId policybitemporalhistoryId) throws EntityNotFoundException {
        LOGGER.debug("Deleting PolicyBitemporalHistory with id: {}", policybitemporalhistoryId);
        PolicyBitemporalHistory deleted = this.wmGenericDao.findById(policybitemporalhistoryId);
        if (deleted == null) {
            LOGGER.debug("No PolicyBitemporalHistory found with id: {}", policybitemporalhistoryId);
            throw new EntityNotFoundException(String.valueOf(policybitemporalhistoryId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
	@Override
	public Page<PolicyBitemporalHistory> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all PolicyBitemporalHistories");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
    @Override
    public Page<PolicyBitemporalHistory> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all PolicyBitemporalHistories");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service SCHOOLDB for table PolicyBitemporalHistory to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

