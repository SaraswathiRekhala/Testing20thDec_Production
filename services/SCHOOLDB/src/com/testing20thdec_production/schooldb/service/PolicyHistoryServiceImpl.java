/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing20thdec_production.schooldb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing20thdec_production.schooldb.PolicyHistory;
import com.testing20thdec_production.schooldb.PolicyHistoryId;


/**
 * ServiceImpl object for domain model class PolicyHistory.
 *
 * @see PolicyHistory
 */
@Service("SCHOOLDB.PolicyHistoryService")
@Validated
public class PolicyHistoryServiceImpl implements PolicyHistoryService {

    private static final Logger LOGGER = LoggerFactory.getLogger(PolicyHistoryServiceImpl.class);


    @Autowired
    @Qualifier("SCHOOLDB.PolicyHistoryDao")
    private WMGenericDao<PolicyHistory, PolicyHistoryId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<PolicyHistory, PolicyHistoryId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "SCHOOLDBTransactionManager")
    @Override
	public PolicyHistory create(PolicyHistory policyHistory) {
        LOGGER.debug("Creating a new PolicyHistory with information: {}", policyHistory);

        PolicyHistory policyHistoryCreated = this.wmGenericDao.create(policyHistory);
        return policyHistoryCreated;
    }

	@Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
	@Override
	public PolicyHistory getById(PolicyHistoryId policyhistoryId) throws EntityNotFoundException {
        LOGGER.debug("Finding PolicyHistory by id: {}", policyhistoryId);
        PolicyHistory policyHistory = this.wmGenericDao.findById(policyhistoryId);
        if (policyHistory == null){
            LOGGER.debug("No PolicyHistory found with id: {}", policyhistoryId);
            throw new EntityNotFoundException(String.valueOf(policyhistoryId));
        }
        return policyHistory;
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
	@Override
	public PolicyHistory findById(PolicyHistoryId policyhistoryId) {
        LOGGER.debug("Finding PolicyHistory by id: {}", policyhistoryId);
        return this.wmGenericDao.findById(policyhistoryId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "SCHOOLDBTransactionManager")
	@Override
	public PolicyHistory update(PolicyHistory policyHistory) throws EntityNotFoundException {
        LOGGER.debug("Updating PolicyHistory with information: {}", policyHistory);
        this.wmGenericDao.update(policyHistory);

        PolicyHistoryId policyhistoryId = new PolicyHistoryId();
        policyhistoryId.setId(policyHistory.getId());
        policyhistoryId.setVin(policyHistory.getVin());
        policyhistoryId.setAnnualMileage(policyHistory.getAnnualMileage());
        policyhistoryId.setRentalCar(policyHistory.getRentalCar());
        policyhistoryId.setCoverageAmt(policyHistory.getCoverageAmt());
        policyhistoryId.setSysStart(policyHistory.getSysStart());
        policyhistoryId.setSysEnd(policyHistory.getSysEnd());
        policyhistoryId.setTransStart(policyHistory.getTransStart());
        policyhistoryId.setSqlOperation(policyHistory.getSqlOperation());

        return this.wmGenericDao.findById(policyhistoryId);
    }

    @Transactional(value = "SCHOOLDBTransactionManager")
	@Override
	public PolicyHistory delete(PolicyHistoryId policyhistoryId) throws EntityNotFoundException {
        LOGGER.debug("Deleting PolicyHistory with id: {}", policyhistoryId);
        PolicyHistory deleted = this.wmGenericDao.findById(policyhistoryId);
        if (deleted == null) {
            LOGGER.debug("No PolicyHistory found with id: {}", policyhistoryId);
            throw new EntityNotFoundException(String.valueOf(policyhistoryId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
	@Override
	public Page<PolicyHistory> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all PolicyHistories");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
    @Override
    public Page<PolicyHistory> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all PolicyHistories");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service SCHOOLDB for table PolicyHistory to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

