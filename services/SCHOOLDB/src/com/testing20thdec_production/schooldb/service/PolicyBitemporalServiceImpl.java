/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing20thdec_production.schooldb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.annotations.TableTemporal;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.data.periods.PeriodClause;
import com.wavemaker.runtime.data.periods.PeriodClauseWrapper;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing20thdec_production.schooldb.PolicyBitemporal;


/**
 * ServiceImpl object for domain model class PolicyBitemporal.
 *
 * @see PolicyBitemporal
 */
@Service("SCHOOLDB.PolicyBitemporalService")
@Validated
public class PolicyBitemporalServiceImpl implements PolicyBitemporalService {

    private static final Logger LOGGER = LoggerFactory.getLogger(PolicyBitemporalServiceImpl.class);


    @Autowired
    @Qualifier("SCHOOLDB.PolicyBitemporalDao")
    private WMGenericDao<PolicyBitemporal, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<PolicyBitemporal, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "SCHOOLDBTransactionManager")
    @Override
	public PolicyBitemporal create(PolicyBitemporal policyBitemporal) {
        LOGGER.debug("Creating a new PolicyBitemporal with information: {}", policyBitemporal);

        PolicyBitemporal policyBitemporalCreated = this.wmGenericDao.create(policyBitemporal);
        return policyBitemporalCreated;
    }

	@Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
	@Override
	public PolicyBitemporal getById(Integer policybitemporalId) throws EntityNotFoundException {
        LOGGER.debug("Finding PolicyBitemporal by id: {}", policybitemporalId);
        PolicyBitemporal policyBitemporal = this.wmGenericDao.findById(policybitemporalId);
        if (policyBitemporal == null){
            LOGGER.debug("No PolicyBitemporal found with id: {}", policybitemporalId);
            throw new EntityNotFoundException(String.valueOf(policybitemporalId));
        }
        return policyBitemporal;
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
	@Override
	public PolicyBitemporal findById(Integer policybitemporalId) {
        LOGGER.debug("Finding PolicyBitemporal by id: {}", policybitemporalId);
        return this.wmGenericDao.findById(policybitemporalId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "SCHOOLDBTransactionManager")
	@Override
	public PolicyBitemporal update(PolicyBitemporal policyBitemporal) throws EntityNotFoundException {
        LOGGER.debug("Updating PolicyBitemporal with information: {}", policyBitemporal);
        this.wmGenericDao.update(policyBitemporal);

        Integer policybitemporalId = policyBitemporal.getId();

        return this.wmGenericDao.findById(policybitemporalId);
    }

    @Transactional(value = "SCHOOLDBTransactionManager")
	@Override
	public PolicyBitemporal delete(Integer policybitemporalId) throws EntityNotFoundException {
        LOGGER.debug("Deleting PolicyBitemporal with id: {}", policybitemporalId);
        PolicyBitemporal deleted = this.wmGenericDao.findById(policybitemporalId);
        if (deleted == null) {
            LOGGER.debug("No PolicyBitemporal found with id: {}", policybitemporalId);
            throw new EntityNotFoundException(String.valueOf(policybitemporalId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
	@Override
	public Page<PolicyBitemporal> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all PolicyBitemporals");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
    @Override
    public Page<PolicyBitemporal> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all PolicyBitemporals");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
    @Override
    public Page<PolicyBitemporal> findHistory(String systemClause, String applicationClause, String query, Pageable pageable) {
        List<PeriodClause> periodClauses = new ArrayList<>(2);
        if(systemClause != null && !systemClause.isEmpty()) {
            periodClauses.add(new PeriodClauseWrapper(TableTemporal.TemporalType.SYSTEM, systemClause));
        }
        if(applicationClause != null && !applicationClause.isEmpty()) {
            periodClauses.add(new PeriodClauseWrapper(TableTemporal.TemporalType.APPLICATION, applicationClause));
        }
        return findHistory(periodClauses, query, pageable);
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
    @Override
    public Page<PolicyBitemporal> findHistory(List<PeriodClause> periodClauses, String query, Pageable pageable) {
        LOGGER.debug("Finding history data for PolicyBitemporal");
        return this.wmGenericDao.findHistory(periodClauses, query, pageable);
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service SCHOOLDB for table PolicyBitemporal to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

