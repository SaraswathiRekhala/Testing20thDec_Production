/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing20thdec_production.schooldb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing20thdec_production.schooldb.PolicyHistoryNoHidden;

/**
 * Service object for domain model class {@link PolicyHistoryNoHidden}.
 */
public interface PolicyHistoryNoHiddenService {

    /**
     * Creates a new PolicyHistoryNoHidden. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on PolicyHistoryNoHidden if any.
     *
     * @param policyHistoryNoHidden Details of the PolicyHistoryNoHidden to be created; value cannot be null.
     * @return The newly created PolicyHistoryNoHidden.
     */
	PolicyHistoryNoHidden create(@Valid PolicyHistoryNoHidden policyHistoryNoHidden);


	/**
	 * Returns PolicyHistoryNoHidden by given id if exists.
	 *
	 * @param policyhistorynohiddenId The id of the PolicyHistoryNoHidden to get; value cannot be null.
	 * @return PolicyHistoryNoHidden associated with the given policyhistorynohiddenId.
     * @throws EntityNotFoundException If no PolicyHistoryNoHidden is found.
	 */
	PolicyHistoryNoHidden getById(Integer policyhistorynohiddenId) throws EntityNotFoundException;

    /**
	 * Find and return the PolicyHistoryNoHidden by given id if exists, returns null otherwise.
	 *
	 * @param policyhistorynohiddenId The id of the PolicyHistoryNoHidden to get; value cannot be null.
	 * @return PolicyHistoryNoHidden associated with the given policyhistorynohiddenId.
	 */
	PolicyHistoryNoHidden findById(Integer policyhistorynohiddenId);


	/**
	 * Updates the details of an existing PolicyHistoryNoHidden. It replaces all fields of the existing PolicyHistoryNoHidden with the given policyHistoryNoHidden.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on PolicyHistoryNoHidden if any.
     *
	 * @param policyHistoryNoHidden The details of the PolicyHistoryNoHidden to be updated; value cannot be null.
	 * @return The updated PolicyHistoryNoHidden.
	 * @throws EntityNotFoundException if no PolicyHistoryNoHidden is found with given input.
	 */
	PolicyHistoryNoHidden update(@Valid PolicyHistoryNoHidden policyHistoryNoHidden) throws EntityNotFoundException;

    /**
	 * Deletes an existing PolicyHistoryNoHidden with the given id.
	 *
	 * @param policyhistorynohiddenId The id of the PolicyHistoryNoHidden to be deleted; value cannot be null.
	 * @return The deleted PolicyHistoryNoHidden.
	 * @throws EntityNotFoundException if no PolicyHistoryNoHidden found with the given id.
	 */
	PolicyHistoryNoHidden delete(Integer policyhistorynohiddenId) throws EntityNotFoundException;

	/**
	 * Find all PolicyHistoryNoHiddens matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching PolicyHistoryNoHiddens.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<PolicyHistoryNoHidden> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all PolicyHistoryNoHiddens matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching PolicyHistoryNoHiddens.
     *
     * @see Pageable
     * @see Page
	 */
    Page<PolicyHistoryNoHidden> findAll(String query, Pageable pageable);

    /**
	 * Exports all PolicyHistoryNoHiddens matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the PolicyHistoryNoHiddens in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the PolicyHistoryNoHidden.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}

