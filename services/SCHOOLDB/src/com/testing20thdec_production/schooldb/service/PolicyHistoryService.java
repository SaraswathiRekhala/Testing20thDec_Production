/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing20thdec_production.schooldb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing20thdec_production.schooldb.PolicyHistory;
import com.testing20thdec_production.schooldb.PolicyHistoryId;

/**
 * Service object for domain model class {@link PolicyHistory}.
 */
public interface PolicyHistoryService {

    /**
     * Creates a new PolicyHistory. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on PolicyHistory if any.
     *
     * @param policyHistory Details of the PolicyHistory to be created; value cannot be null.
     * @return The newly created PolicyHistory.
     */
	PolicyHistory create(@Valid PolicyHistory policyHistory);


	/**
	 * Returns PolicyHistory by given id if exists.
	 *
	 * @param policyhistoryId The id of the PolicyHistory to get; value cannot be null.
	 * @return PolicyHistory associated with the given policyhistoryId.
     * @throws EntityNotFoundException If no PolicyHistory is found.
	 */
	PolicyHistory getById(PolicyHistoryId policyhistoryId) throws EntityNotFoundException;

    /**
	 * Find and return the PolicyHistory by given id if exists, returns null otherwise.
	 *
	 * @param policyhistoryId The id of the PolicyHistory to get; value cannot be null.
	 * @return PolicyHistory associated with the given policyhistoryId.
	 */
	PolicyHistory findById(PolicyHistoryId policyhistoryId);


	/**
	 * Updates the details of an existing PolicyHistory. It replaces all fields of the existing PolicyHistory with the given policyHistory.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on PolicyHistory if any.
     *
	 * @param policyHistory The details of the PolicyHistory to be updated; value cannot be null.
	 * @return The updated PolicyHistory.
	 * @throws EntityNotFoundException if no PolicyHistory is found with given input.
	 */
	PolicyHistory update(@Valid PolicyHistory policyHistory) throws EntityNotFoundException;

    /**
	 * Deletes an existing PolicyHistory with the given id.
	 *
	 * @param policyhistoryId The id of the PolicyHistory to be deleted; value cannot be null.
	 * @return The deleted PolicyHistory.
	 * @throws EntityNotFoundException if no PolicyHistory found with the given id.
	 */
	PolicyHistory delete(PolicyHistoryId policyhistoryId) throws EntityNotFoundException;

	/**
	 * Find all PolicyHistories matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching PolicyHistories.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<PolicyHistory> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all PolicyHistories matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching PolicyHistories.
     *
     * @see Pageable
     * @see Page
	 */
    Page<PolicyHistory> findAll(String query, Pageable pageable);

    /**
	 * Exports all PolicyHistories matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the PolicyHistories in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the PolicyHistory.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}

