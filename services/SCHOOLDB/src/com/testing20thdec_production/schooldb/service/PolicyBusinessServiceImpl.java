/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing20thdec_production.schooldb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.annotations.TableTemporal;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.data.periods.PeriodClause;
import com.wavemaker.runtime.data.periods.PeriodClauseWrapper;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing20thdec_production.schooldb.PolicyBusiness;


/**
 * ServiceImpl object for domain model class PolicyBusiness.
 *
 * @see PolicyBusiness
 */
@Service("SCHOOLDB.PolicyBusinessService")
@Validated
public class PolicyBusinessServiceImpl implements PolicyBusinessService {

    private static final Logger LOGGER = LoggerFactory.getLogger(PolicyBusinessServiceImpl.class);


    @Autowired
    @Qualifier("SCHOOLDB.PolicyBusinessDao")
    private WMGenericDao<PolicyBusiness, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<PolicyBusiness, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "SCHOOLDBTransactionManager")
    @Override
	public PolicyBusiness create(PolicyBusiness policyBusiness) {
        LOGGER.debug("Creating a new PolicyBusiness with information: {}", policyBusiness);

        PolicyBusiness policyBusinessCreated = this.wmGenericDao.create(policyBusiness);
        return policyBusinessCreated;
    }

	@Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
	@Override
	public PolicyBusiness getById(Integer policybusinessId) throws EntityNotFoundException {
        LOGGER.debug("Finding PolicyBusiness by id: {}", policybusinessId);
        PolicyBusiness policyBusiness = this.wmGenericDao.findById(policybusinessId);
        if (policyBusiness == null){
            LOGGER.debug("No PolicyBusiness found with id: {}", policybusinessId);
            throw new EntityNotFoundException(String.valueOf(policybusinessId));
        }
        return policyBusiness;
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
	@Override
	public PolicyBusiness findById(Integer policybusinessId) {
        LOGGER.debug("Finding PolicyBusiness by id: {}", policybusinessId);
        return this.wmGenericDao.findById(policybusinessId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "SCHOOLDBTransactionManager")
	@Override
	public PolicyBusiness update(PolicyBusiness policyBusiness) throws EntityNotFoundException {
        LOGGER.debug("Updating PolicyBusiness with information: {}", policyBusiness);
        this.wmGenericDao.update(policyBusiness);

        Integer policybusinessId = policyBusiness.getId();

        return this.wmGenericDao.findById(policybusinessId);
    }

    @Transactional(value = "SCHOOLDBTransactionManager")
	@Override
	public PolicyBusiness delete(Integer policybusinessId) throws EntityNotFoundException {
        LOGGER.debug("Deleting PolicyBusiness with id: {}", policybusinessId);
        PolicyBusiness deleted = this.wmGenericDao.findById(policybusinessId);
        if (deleted == null) {
            LOGGER.debug("No PolicyBusiness found with id: {}", policybusinessId);
            throw new EntityNotFoundException(String.valueOf(policybusinessId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
	@Override
	public Page<PolicyBusiness> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all PolicyBusinesses");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
    @Override
    public Page<PolicyBusiness> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all PolicyBusinesses");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
    @Override
    public Page<PolicyBusiness> findHistory(String applicationClause, String query, Pageable pageable) {
        List<PeriodClause> periodClauses = new ArrayList<>(2);
        if(applicationClause != null && !applicationClause.isEmpty()) {
            periodClauses.add(new PeriodClauseWrapper(TableTemporal.TemporalType.APPLICATION, applicationClause));
        }
        return findHistory(periodClauses, query, pageable);
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
    @Override
    public Page<PolicyBusiness> findHistory(List<PeriodClause> periodClauses, String query, Pageable pageable) {
        LOGGER.debug("Finding history data for PolicyBusiness");
        return this.wmGenericDao.findHistory(periodClauses, query, pageable);
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service SCHOOLDB for table PolicyBusiness to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

