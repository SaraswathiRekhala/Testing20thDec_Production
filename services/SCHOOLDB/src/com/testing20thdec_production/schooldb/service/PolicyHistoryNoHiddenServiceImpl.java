/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing20thdec_production.schooldb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing20thdec_production.schooldb.PolicyHistoryNoHidden;


/**
 * ServiceImpl object for domain model class PolicyHistoryNoHidden.
 *
 * @see PolicyHistoryNoHidden
 */
@Service("SCHOOLDB.PolicyHistoryNoHiddenService")
@Validated
public class PolicyHistoryNoHiddenServiceImpl implements PolicyHistoryNoHiddenService {

    private static final Logger LOGGER = LoggerFactory.getLogger(PolicyHistoryNoHiddenServiceImpl.class);


    @Autowired
    @Qualifier("SCHOOLDB.PolicyHistoryNoHiddenDao")
    private WMGenericDao<PolicyHistoryNoHidden, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<PolicyHistoryNoHidden, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "SCHOOLDBTransactionManager")
    @Override
	public PolicyHistoryNoHidden create(PolicyHistoryNoHidden policyHistoryNoHidden) {
        LOGGER.debug("Creating a new PolicyHistoryNoHidden with information: {}", policyHistoryNoHidden);

        PolicyHistoryNoHidden policyHistoryNoHiddenCreated = this.wmGenericDao.create(policyHistoryNoHidden);
        return policyHistoryNoHiddenCreated;
    }

	@Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
	@Override
	public PolicyHistoryNoHidden getById(Integer policyhistorynohiddenId) throws EntityNotFoundException {
        LOGGER.debug("Finding PolicyHistoryNoHidden by id: {}", policyhistorynohiddenId);
        PolicyHistoryNoHidden policyHistoryNoHidden = this.wmGenericDao.findById(policyhistorynohiddenId);
        if (policyHistoryNoHidden == null){
            LOGGER.debug("No PolicyHistoryNoHidden found with id: {}", policyhistorynohiddenId);
            throw new EntityNotFoundException(String.valueOf(policyhistorynohiddenId));
        }
        return policyHistoryNoHidden;
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
	@Override
	public PolicyHistoryNoHidden findById(Integer policyhistorynohiddenId) {
        LOGGER.debug("Finding PolicyHistoryNoHidden by id: {}", policyhistorynohiddenId);
        return this.wmGenericDao.findById(policyhistorynohiddenId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "SCHOOLDBTransactionManager")
	@Override
	public PolicyHistoryNoHidden update(PolicyHistoryNoHidden policyHistoryNoHidden) throws EntityNotFoundException {
        LOGGER.debug("Updating PolicyHistoryNoHidden with information: {}", policyHistoryNoHidden);
        this.wmGenericDao.update(policyHistoryNoHidden);

        Integer policyhistorynohiddenId = policyHistoryNoHidden.getId();

        return this.wmGenericDao.findById(policyhistorynohiddenId);
    }

    @Transactional(value = "SCHOOLDBTransactionManager")
	@Override
	public PolicyHistoryNoHidden delete(Integer policyhistorynohiddenId) throws EntityNotFoundException {
        LOGGER.debug("Deleting PolicyHistoryNoHidden with id: {}", policyhistorynohiddenId);
        PolicyHistoryNoHidden deleted = this.wmGenericDao.findById(policyhistorynohiddenId);
        if (deleted == null) {
            LOGGER.debug("No PolicyHistoryNoHidden found with id: {}", policyhistorynohiddenId);
            throw new EntityNotFoundException(String.valueOf(policyhistorynohiddenId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
	@Override
	public Page<PolicyHistoryNoHidden> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all PolicyHistoryNoHiddens");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
    @Override
    public Page<PolicyHistoryNoHidden> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all PolicyHistoryNoHiddens");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service SCHOOLDB for table PolicyHistoryNoHidden to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "SCHOOLDBTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

