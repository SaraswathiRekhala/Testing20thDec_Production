/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing20thdec_production.schooldb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.sql.Date;
import java.sql.Timestamp;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.testing20thdec_production.schooldb.PolicyBitemporalHistory;
import com.testing20thdec_production.schooldb.PolicyBitemporalHistoryId;
import com.testing20thdec_production.schooldb.service.PolicyBitemporalHistoryService;


/**
 * Controller object for domain model class PolicyBitemporalHistory.
 * @see PolicyBitemporalHistory
 */
@RestController("SCHOOLDB.PolicyBitemporalHistoryController")
@Api(value = "PolicyBitemporalHistoryController", description = "Exposes APIs to work with PolicyBitemporalHistory resource.")
@RequestMapping("/SCHOOLDB/PolicyBitemporalHistory")
public class PolicyBitemporalHistoryController {

    private static final Logger LOGGER = LoggerFactory.getLogger(PolicyBitemporalHistoryController.class);

    @Autowired
	@Qualifier("SCHOOLDB.PolicyBitemporalHistoryService")
	private PolicyBitemporalHistoryService policyBitemporalHistoryService;

	@ApiOperation(value = "Creates a new PolicyBitemporalHistory instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PolicyBitemporalHistory createPolicyBitemporalHistory(@RequestBody PolicyBitemporalHistory policyBitemporalHistory) {
		LOGGER.debug("Create PolicyBitemporalHistory with information: {}" , policyBitemporalHistory);

		policyBitemporalHistory = policyBitemporalHistoryService.create(policyBitemporalHistory);
		LOGGER.debug("Created PolicyBitemporalHistory with information: {}" , policyBitemporalHistory);

	    return policyBitemporalHistory;
	}

@ApiOperation(value = "Returns the PolicyBitemporalHistory instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PolicyBitemporalHistory getPolicyBitemporalHistory(@RequestParam("id") Integer id,@RequestParam("vin") String vin,@RequestParam("annualMileage") Integer annualMileage,@RequestParam("rentalCar") String rentalCar,@RequestParam("coverageAmt") Integer coverageAmt,@RequestParam("busStart") Date busStart,@RequestParam("busEnd") Date busEnd,@RequestParam("sysStart") Timestamp sysStart,@RequestParam("sysEnd") Timestamp sysEnd,@RequestParam("transStart") Timestamp transStart,@RequestParam("sqlOperation") String sqlOperation) throws EntityNotFoundException {

        PolicyBitemporalHistoryId policybitemporalhistoryId = new PolicyBitemporalHistoryId();
        policybitemporalhistoryId.setId(id);
        policybitemporalhistoryId.setVin(vin);
        policybitemporalhistoryId.setAnnualMileage(annualMileage);
        policybitemporalhistoryId.setRentalCar(rentalCar);
        policybitemporalhistoryId.setCoverageAmt(coverageAmt);
        policybitemporalhistoryId.setBusStart(busStart);
        policybitemporalhistoryId.setBusEnd(busEnd);
        policybitemporalhistoryId.setSysStart(sysStart);
        policybitemporalhistoryId.setSysEnd(sysEnd);
        policybitemporalhistoryId.setTransStart(transStart);
        policybitemporalhistoryId.setSqlOperation(sqlOperation);

        LOGGER.debug("Getting PolicyBitemporalHistory with id: {}" , policybitemporalhistoryId);
        PolicyBitemporalHistory policyBitemporalHistory = policyBitemporalHistoryService.getById(policybitemporalhistoryId);
        LOGGER.debug("PolicyBitemporalHistory details with id: {}" , policyBitemporalHistory);

        return policyBitemporalHistory;
    }



    @ApiOperation(value = "Updates the PolicyBitemporalHistory instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PolicyBitemporalHistory editPolicyBitemporalHistory(@RequestParam("id") Integer id,@RequestParam("vin") String vin,@RequestParam("annualMileage") Integer annualMileage,@RequestParam("rentalCar") String rentalCar,@RequestParam("coverageAmt") Integer coverageAmt,@RequestParam("busStart") Date busStart,@RequestParam("busEnd") Date busEnd,@RequestParam("sysStart") Timestamp sysStart,@RequestParam("sysEnd") Timestamp sysEnd,@RequestParam("transStart") Timestamp transStart,@RequestParam("sqlOperation") String sqlOperation, @RequestBody PolicyBitemporalHistory policyBitemporalHistory) throws EntityNotFoundException {

        policyBitemporalHistory.setId(id);
        policyBitemporalHistory.setVin(vin);
        policyBitemporalHistory.setAnnualMileage(annualMileage);
        policyBitemporalHistory.setRentalCar(rentalCar);
        policyBitemporalHistory.setCoverageAmt(coverageAmt);
        policyBitemporalHistory.setBusStart(busStart);
        policyBitemporalHistory.setBusEnd(busEnd);
        policyBitemporalHistory.setSysStart(sysStart);
        policyBitemporalHistory.setSysEnd(sysEnd);
        policyBitemporalHistory.setTransStart(transStart);
        policyBitemporalHistory.setSqlOperation(sqlOperation);

        LOGGER.debug("PolicyBitemporalHistory details with id is updated with: {}" , policyBitemporalHistory);

        return policyBitemporalHistoryService.update(policyBitemporalHistory);
    }


    @ApiOperation(value = "Deletes the PolicyBitemporalHistory instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deletePolicyBitemporalHistory(@RequestParam("id") Integer id,@RequestParam("vin") String vin,@RequestParam("annualMileage") Integer annualMileage,@RequestParam("rentalCar") String rentalCar,@RequestParam("coverageAmt") Integer coverageAmt,@RequestParam("busStart") Date busStart,@RequestParam("busEnd") Date busEnd,@RequestParam("sysStart") Timestamp sysStart,@RequestParam("sysEnd") Timestamp sysEnd,@RequestParam("transStart") Timestamp transStart,@RequestParam("sqlOperation") String sqlOperation) throws EntityNotFoundException {

        PolicyBitemporalHistoryId policybitemporalhistoryId = new PolicyBitemporalHistoryId();
        policybitemporalhistoryId.setId(id);
        policybitemporalhistoryId.setVin(vin);
        policybitemporalhistoryId.setAnnualMileage(annualMileage);
        policybitemporalhistoryId.setRentalCar(rentalCar);
        policybitemporalhistoryId.setCoverageAmt(coverageAmt);
        policybitemporalhistoryId.setBusStart(busStart);
        policybitemporalhistoryId.setBusEnd(busEnd);
        policybitemporalhistoryId.setSysStart(sysStart);
        policybitemporalhistoryId.setSysEnd(sysEnd);
        policybitemporalhistoryId.setTransStart(transStart);
        policybitemporalhistoryId.setSqlOperation(sqlOperation);

        LOGGER.debug("Deleting PolicyBitemporalHistory with id: {}" , policybitemporalhistoryId);
        PolicyBitemporalHistory policyBitemporalHistory = policyBitemporalHistoryService.delete(policybitemporalhistoryId);

        return policyBitemporalHistory != null;
    }


    /**
     * @deprecated Use {@link #findPolicyBitemporalHistories(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of PolicyBitemporalHistory instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PolicyBitemporalHistory> searchPolicyBitemporalHistoriesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering PolicyBitemporalHistories list");
        return policyBitemporalHistoryService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of PolicyBitemporalHistory instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PolicyBitemporalHistory> findPolicyBitemporalHistories(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering PolicyBitemporalHistories list");
        return policyBitemporalHistoryService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of PolicyBitemporalHistory instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PolicyBitemporalHistory> filterPolicyBitemporalHistories(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering PolicyBitemporalHistories list");
        return policyBitemporalHistoryService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportPolicyBitemporalHistories(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return policyBitemporalHistoryService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of PolicyBitemporalHistory instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countPolicyBitemporalHistories( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting PolicyBitemporalHistories");
		return policyBitemporalHistoryService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getPolicyBitemporalHistoryAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return policyBitemporalHistoryService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PolicyBitemporalHistoryService instance
	 */
	protected void setPolicyBitemporalHistoryService(PolicyBitemporalHistoryService service) {
		this.policyBitemporalHistoryService = service;
	}

}

