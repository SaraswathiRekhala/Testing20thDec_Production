/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing20thdec_production.schooldb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.testing20thdec_production.schooldb.Policy;
import com.testing20thdec_production.schooldb.service.PolicyService;


/**
 * Controller object for domain model class Policy.
 * @see Policy
 */
@RestController("SCHOOLDB.PolicyController")
@Api(value = "PolicyController", description = "Exposes APIs to work with Policy resource.")
@RequestMapping("/SCHOOLDB/Policy")
public class PolicyController {

    private static final Logger LOGGER = LoggerFactory.getLogger(PolicyController.class);

    @Autowired
	@Qualifier("SCHOOLDB.PolicyService")
	private PolicyService policyService;

	@ApiOperation(value = "Creates a new Policy instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Policy createPolicy(@RequestBody Policy policy) {
		LOGGER.debug("Create Policy with information: {}" , policy);

		policy = policyService.create(policy);
		LOGGER.debug("Created Policy with information: {}" , policy);

	    return policy;
	}

    @ApiOperation(value = "Returns the Policy instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Policy getPolicy(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Policy with id: {}" , id);

        Policy foundPolicy = policyService.getById(id);
        LOGGER.debug("Policy details with id: {}" , foundPolicy);

        return foundPolicy;
    }

    @ApiOperation(value = "Updates the Policy instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Policy editPolicy(@PathVariable("id") Integer id, @RequestBody Policy policy) throws EntityNotFoundException {
        LOGGER.debug("Editing Policy with id: {}" , policy.getId());

        policy.setId(id);
        policy = policyService.update(policy);
        LOGGER.debug("Policy details with id: {}" , policy);

        return policy;
    }

    @ApiOperation(value = "Deletes the Policy instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deletePolicy(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Policy with id: {}" , id);

        Policy deletedPolicy = policyService.delete(id);

        return deletedPolicy != null;
    }

    /**
     * @deprecated Use {@link #findPolicies(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Policy instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Policy> searchPoliciesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Policies list");
        return policyService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Policy instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Policy> findPolicies(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Policies list");
        return policyService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Policy instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Policy> filterPolicies(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Policies list");
        return policyService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated history of Policy instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(value = "/history", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Policy> findPoliciesHistory(@ApiParam("system period clause to filter the history data.")@RequestParam(value = "systemClause", required = true) String systemClause, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Policies history list");
        return policyService.findHistory(systemClause, query, pageable);
    }

    @ApiOperation(value = "Returns the paginated history of Policy instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/history", method = RequestMethod.POST, consumes = "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Policy> filterPoliciesHistory(@ApiParam("system period clause to filter the history data.")@RequestParam(value = "systemClause", required = true) String systemClause, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Policies history list");
        return policyService.findHistory(systemClause, query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportPolicies(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return policyService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Policy instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countPolicies( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Policies");
		return policyService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getPolicyAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return policyService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PolicyService instance
	 */
	protected void setPolicyService(PolicyService service) {
		this.policyService = service;
	}

}

