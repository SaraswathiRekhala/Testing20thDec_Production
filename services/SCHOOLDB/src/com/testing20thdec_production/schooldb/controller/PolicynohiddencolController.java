/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing20thdec_production.schooldb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.testing20thdec_production.schooldb.Policynohiddencol;
import com.testing20thdec_production.schooldb.service.PolicynohiddencolService;


/**
 * Controller object for domain model class Policynohiddencol.
 * @see Policynohiddencol
 */
@RestController("SCHOOLDB.PolicynohiddencolController")
@Api(value = "PolicynohiddencolController", description = "Exposes APIs to work with Policynohiddencol resource.")
@RequestMapping("/SCHOOLDB/Policynohiddencol")
public class PolicynohiddencolController {

    private static final Logger LOGGER = LoggerFactory.getLogger(PolicynohiddencolController.class);

    @Autowired
	@Qualifier("SCHOOLDB.PolicynohiddencolService")
	private PolicynohiddencolService policynohiddencolService;

	@ApiOperation(value = "Creates a new Policynohiddencol instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Policynohiddencol createPolicynohiddencol(@RequestBody Policynohiddencol policynohiddencol) {
		LOGGER.debug("Create Policynohiddencol with information: {}" , policynohiddencol);

		policynohiddencol = policynohiddencolService.create(policynohiddencol);
		LOGGER.debug("Created Policynohiddencol with information: {}" , policynohiddencol);

	    return policynohiddencol;
	}

    @ApiOperation(value = "Returns the Policynohiddencol instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Policynohiddencol getPolicynohiddencol(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Policynohiddencol with id: {}" , id);

        Policynohiddencol foundPolicynohiddencol = policynohiddencolService.getById(id);
        LOGGER.debug("Policynohiddencol details with id: {}" , foundPolicynohiddencol);

        return foundPolicynohiddencol;
    }

    @ApiOperation(value = "Updates the Policynohiddencol instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Policynohiddencol editPolicynohiddencol(@PathVariable("id") Integer id, @RequestBody Policynohiddencol policynohiddencol) throws EntityNotFoundException {
        LOGGER.debug("Editing Policynohiddencol with id: {}" , policynohiddencol.getId());

        policynohiddencol.setId(id);
        policynohiddencol = policynohiddencolService.update(policynohiddencol);
        LOGGER.debug("Policynohiddencol details with id: {}" , policynohiddencol);

        return policynohiddencol;
    }

    @ApiOperation(value = "Deletes the Policynohiddencol instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deletePolicynohiddencol(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Policynohiddencol with id: {}" , id);

        Policynohiddencol deletedPolicynohiddencol = policynohiddencolService.delete(id);

        return deletedPolicynohiddencol != null;
    }

    /**
     * @deprecated Use {@link #findPolicynohiddencols(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Policynohiddencol instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Policynohiddencol> searchPolicynohiddencolsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Policynohiddencols list");
        return policynohiddencolService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Policynohiddencol instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Policynohiddencol> findPolicynohiddencols(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Policynohiddencols list");
        return policynohiddencolService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Policynohiddencol instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Policynohiddencol> filterPolicynohiddencols(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Policynohiddencols list");
        return policynohiddencolService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated history of Policynohiddencol instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(value = "/history", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Policynohiddencol> findPolicynohiddencolsHistory(@ApiParam("system period clause to filter the history data.")@RequestParam(value = "systemClause", required = true) String systemClause, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Policynohiddencols history list");
        return policynohiddencolService.findHistory(systemClause, query, pageable);
    }

    @ApiOperation(value = "Returns the paginated history of Policynohiddencol instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/history", method = RequestMethod.POST, consumes = "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Policynohiddencol> filterPolicynohiddencolsHistory(@ApiParam("system period clause to filter the history data.")@RequestParam(value = "systemClause", required = true) String systemClause, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Policynohiddencols history list");
        return policynohiddencolService.findHistory(systemClause, query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportPolicynohiddencols(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return policynohiddencolService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Policynohiddencol instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countPolicynohiddencols( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Policynohiddencols");
		return policynohiddencolService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getPolicynohiddencolAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return policynohiddencolService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PolicynohiddencolService instance
	 */
	protected void setPolicynohiddencolService(PolicynohiddencolService service) {
		this.policynohiddencolService = service;
	}

}

